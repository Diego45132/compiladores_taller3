# Taller de Expresiones Regulares (Regex) üîç

---

## Parte 1: Identificadores V√°lidos

Los identificadores deben comenzar con una letra o un guion bajo y pueden contener letras, n√∫meros o guiones bajos posteriormente.

### Expresi√≥n Regular para Identificadores

$$`[a-zA-Z\_][a-zA-Z0-9\_]*`$$

| Componente | Descripci√≥n |
| :--- | :--- |
| `[a-zA-Z\_]` | **Inicio:** Debe ser una letra (may√∫scula o min√∫scula) o un guion bajo. |
| `[a-zA-Z0-9\_]*` | **Cuerpo:** Cero o m√°s (`*`) letras, n√∫meros o guiones bajos. |

---

## Parte 2: N√∫meros Enteros y Decimales

### 1. Expresi√≥n Regular para N√∫meros Enteros

Detecta enteros positivos, negativos o cero.

$$`[+-]?\d+`$$

| Componente | Descripci√≥n |
| :--- | :--- |
| `[+-]?` | Un signo m√°s (`+`) o menos (`-`) **opcional** (`?`). |
| `\d+` | Uno o m√°s d√≠gitos (donde $\text{\d}$ es un atajo para $[0-9]$). |

### 2. Expresi√≥n Regular para N√∫meros Decimales

Detecta n√∫meros con punto decimal, incluyendo el signo opcional.

$$`[+-]?\d+\.\d+`$$

| Componente | Descripci√≥n |
| :--- | :--- |
| `[+-]?` | Signo opcional al inicio. |
| `\d+` | Uno o m√°s d√≠gitos antes del punto. |
| `\.` | El **punto decimal literal** (escapado con `\`). |
| `\d+` | Uno o m√°s d√≠gitos despu√©s del punto. |

---

## Parte 3: Operadores Aritm√©ticos y Relacionales

### Expresi√≥n Regular para Operadores Aritm√©ticos

Detecta los operadores: $+$, $-$, $*$, $/$ y $\%$.

$$`[+\-*/%]`$$

### Expresi√≥n Regular para Operadores Relacionales

Detecta los operadores: $==$, $!=$, $<$, $>$, $\le$, $\ge$.

$$`(?:==|!=|<=|>=|<|>)`$$

*Nota: Las secuencias de dos caracteres ($==, !=, \le, \ge$) se listan primero para asegurar su correcta detecci√≥n antes que los operadores de un solo car√°cter.*

---

## Parte 4: Palabras Reservadas Simples

Identifica las palabras reservadas: `if`, `else`, `while`, `for`, `return`.

### Expresi√≥n Regular para Palabras Reservadas

$$`\b(if|else|while|for|return)\b`$$

* **$\text{\b}$ (Delimitador de palabra):** Es crucial usar el delimitador de palabra (*Word Boundary*) para asegurar que solo coincidan las palabras completas.

---

## Parte 5: Mini Reto Integrador

**C√≥digo a analizar:**
let num = 25;
if(num >= 10) {
return num + 5;
}


### Clasificaci√≥n L√©xica de Fragmentos

Se clasifican los fragmentos clave del c√≥digo:

| Fragmento | Categor√≠a L√©xica |
| :--- | :--- |
| `let` | **Identificador** |
| `num` | **Identificador** |
| `25` | **N√∫mero** (Entero) |
| `if` | **Palabra Reservada** |
| `num` | **Identificador** |
| `>=` | **Operador** (Relacional) |
| `10` | **N√∫mero** (Entero) |
| `return` | **Palabra Reservada** |
| `num` | **Identificador** |
| `+` | **Operador** (Aritm√©tico) |
| `5` | **N√∫mero** (Entero) |